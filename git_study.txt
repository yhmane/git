https://git-scm.com/book/ko/v2

Git Documentation Reference Read

	1 git start
	
		Git 장점 
			- 기존 중앙 집중형의 경우, 중앙 서버가 고장나면 복구하기 전까지 접근이 힘들다.
			- git의 경우 분산 버전관리를 하기 때문에, 클라이언트 중 아무거나 골라도 서버를 복원할 수 있다.
			- 거의 모든 명령을 로컬에서 진행 (서버에 접근하여 예전 버전을 가져올 필요가 없다) - 해시를 사용하여 체크섬을 만든다
			
		
		Git 3state
			- committed : 데이터가 로켈베이스에 안전하게 저장
			- modified : 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것
			- staged : 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태
			
		GUI(그래픽 유저 인터페이스)방법과 CLI(커맨드 라인 인터페이스) 방법이 있음
			
		Install Git for OS (Window, Linux, OS X)
		
		* 사용자 정보 입력 (한번이 고정)
			$ git config --global user.name "yunho"
			$ git config --global user.email hwang9yh@kaoni.com
			--global 옵션으로 설정하는 것은 딱 한 번만 하면 된다. 해당 시스템에서 해당 사용자가 사용할 때는 이 정보를 사용한다. 
			만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 --global 옵션을 빼고 명령을 실행한다.
	


	
	2 git basic	
	
		저장소 만들기 2가지 방법
		
			1) 기존 디렉토리를 Git 저장소로 만들기	- 해당 디렉토리 이동 -> git init
			2) 기존 저장소를 Clone 하기 - git clone https://github.com/libgit2/libgit2
								디렉토리명을 지정하지 않으면 libgit2로 클론된다.
								바꿔주고 싶으면 git clone https://github.com/libgit2/libgit2 mylibgit 이런식으로 설정
			3) 현재 git이 설정된 working directory로 clone 된다
		
		
		
		수정하고 저장소에 저장하기
		
			파일을 수정하다가 저장하고 싶으면 스냅샷을 커밋한다.
			git -diff는 아직 unstage 상태인 것들만 보여준다. 수정한 파일을 stageing area에 넣었다면 확인 불가
				1) WK(디렉토리)는 Tracked와 Untracked로 나뉜다.
				2) Tracked는 unmodified, modified, staged/ Untracked로 나뉨
				3) Tracked는 스냅샷이 이미 포함되어 있던 파일을
					git add를 하여 untracked, modified를 staged로 바꿔 줘야 함
					ex) git add 파일명
				4) git commit 하고 메세지 작성
					*방법
						첫번째 - git commit 후, 지정된 양식에서 커밋 메시지 작성
						두번째 - git commit -m "Story 182: Fix benchmarks for speed" 커밋시 메시지 인라인으로 작성
		
		삭제
		
			rm 삭제 파일 -> WD에선 삭제 됐지만, staged 단계는 아니다
			git rm 삭제 파일 -> stage 상태가 된다
			git commit -m "커밋 메시지"	커밋
		
		
		커밋 히스토리 조회하기
			
			git log 커밋 내용만 보여줌
			git log -p (-옵션 숫자 ex -2 최근 2개 로그) (상세 내역을 보여줌)
			git log --stat 변경된 +,- 수를 보여줌
		
		
		되돌리기
			
			git commit --amend
			완료한 커밋을 수정하고 싶을 때 사용. - 어떤 파일을 빼먹었을 때, - 커밋 메시지를 잘못 입력하였을 때
				git commit -m "initial commit"
				git add forgotten_file	(option이다. 파일 추가 없으면 안해도 됨)
				git commit --amend
			=> git message룰 수정할 수 있고, overriding 된다.
				
				
		파일 상태를 Unstage로 변경하기
		
			예를 들어, 파일을 두 개 수정하고서 따로따로 커밋하려고 했지만, 실수로 git add * 라고 실행하였을 경우,
			두 파일 모두 Staging Area애 들어 있다. 
			a 파일 변경, b 파일 변경 후 git add *
				따로 커밋하기 위해, git reset HEAD a
				그 후, git commit -m "b"
				다 시, git add a 		git commit -m "a" 하면 각자 커밋 된다
		
		
		modified 파일 되돌리기
		
			파일을 수정하여 modified 상태가 되었다. 하지만, 이전의 상태로 돌아가고 싶으면
			git checkout -- 파일이름 => 추천되는 방법은 아님.

			이유
				변경한 내용을 쉽게 버릴수는 없고 하지만 당장은 되돌려야만 하는 상황이라면 Stash와 Branch를 사용하자. 
				Git으로 커밋한 모든 것은 언제나 복구할 수 있다. 삭제한 브랜치에 있었던 것도, --amend 옵션으로 다시 커밋한 것도 복구할 수 있다
				하지만 커밋하지 않고 잃어버린 것은 절대로 되돌릴 수 없다.
				
		
		Remote Repository 확인 하기	
		
			git remote 명령으로 현재 프로젝트에 등록된 리모트 저장소를 확인할 수 있다.
			
		저장된 내역 remote서버에 올리기
			
			1) 변경 사항 모두 add
			2) 변경 사항 commit
				git push origin master
				
	3 git branch
 	
		Branch란?
			개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생긴다. 
			코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 브랜치다.
	
		git branch 브랜치이름 => 독립적인 브랜치를 만들어준다
		git checkout 브랜치 이름 => 해당 브랜치로 변경
			수정 작업을 완료하고, commit 하면 독립적인 branch 완성
		
		Merge
		
			서로 독립적인 브랜치를 병합해주어야 한다. merge는 다음 3가지 방식이 있다
			1)	fast-forward				=> 후속 브랜치의 내용만 변경되어 간단히 수행된다
			2)	3-way-merge 'recursive'		=> 겹치는 부분이 없이 수정되어 3개의 커밋상태를 만들고 최적화된 커밋으로 병합
			3)	conflict => 수동으로 해결 		=> 충돌이 일어나 개발자가 코드를 보고 고쳐 주어야 한다.